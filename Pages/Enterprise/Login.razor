@page "/LoginPage"
@inject IMessageService _message

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;

<Card Style="width: 500px;">

<Form Loading="loading" Model="@model" 
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish" 
      OnFinishFailed="OnFinishFailed">
    <FormItem Label="用户名" >
        <Input @bind-Value="@context.Username" />
    </FormItem>
    <FormItem Label="密码">
        <InputPassword @bind-Value="@context.Password"  />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Checkbox @bind-Value="context.RememberMe">记住我</Checkbox>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" OnClick="LogIn" HtmlType="submit">
            登录
        </Button>
    </FormItem>
</Form>

@* 
<Button Type="primary" OnClick="OnClick">
    Display normal message
</Button>

<div style="margin-top: 16px">
    Loading state：
    <Switch Checked=loading OnChange=toggle />
</div> *@
</Card>

@code
{
    public class Model
    {
        [Required]
        public string? Username { get; set; }
        [Required]
        public string? Password { get; set; }
        public bool RememberMe { get; set; } = true;
    }

    private Model model = new Model();

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;
}



@inject IHttpClientFactory client
@code{
    Controller.DaoController? Dc;
    string idstrinput="";
    async Task<ehrms.Model.Employee?> GetById(string idstr)
    { 
        @* idstr=id.ToString(); *@
        if(idstr is null ||idstr==""){
          return null;
        }
        Dc=new(client);
        @* List<ehrms.Model.Employee>? tlist = []; *@
        var result = await Dc.GetByIdAsync<ehrms.Model.Employee>("Employees",idstr); 
        if(result is null){
          return null;
        }
        @* tlist.Add(result);
        EmployeeList=tlist; *@
        StateHasChanged(); 
        return result;
        

    }

    public async Task LogIn(){

        var inputpsw = model.Password;
        if(inputpsw is null){
            await _message.Error("登录失败密码为空", 5);
            return;
        }
        var result = await GetById(model.Username!);
        if(result is null){
            await _message.Error("登录失败无用户", 5);
            return;
        }
        var psw=result.Password;
        if(psw!.Equals(inputpsw)){
            //await OnClick();
            
            await _message.Success("登录成功", 5);
            return;
        }

        await _message.Error("登录失败", 5);

        @* await Task.Delay(2000); *@

    }


    private async Task OnClick()
    {
        string key = $"updatable-{DateTime.Now.Ticks}";
        var config = new MessageConfig()
        {
            Content = "Loading...",
            Key = key
        };
        _message.Loading(config);

        await Task.Delay(2000);

        config.Content = "Loaded";
        config.Duration = 2;
        await _message.Success(config);
    }
}