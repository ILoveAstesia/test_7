@page "/"
@using AntDesign


@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@code{
    private Dictionary<string, int> column = new Dictionary<string, int> {
        { "xxl", 3 },
        { "xl", 3},
        { "lg", 2},
        { "md", 2},
        { "sm", 1},
        { "xs", 1}
    };

    protected override async Task OnAfterRenderAsync(bool firstRender){

        @* await localStorage.SetItemAsync("right", result.Level_right);
        await localStorage.SetItemAsync("name", result.Name);
        await localStorage.SetItemAsync("id", result.Id);
        await localStorage.SetItemAsync("login state", true); *@
        //var name = await localStorage.GetItemAsync<string>("name");
        if(firstRender){

        ID = await localStorage.GetItemAsync<int>("id");
        LoginState = await localStorage.GetItemAsync<bool>("login state");
            if  (ID != 0){
                await GetInfo();
            }
        }
            StateHasChanged();
    }
    int ID=0;
    bool LoginState=false;

}

@if(LoginState is false){
    <span>当前为游客状态，用户自查请登录。</span>
    
}else{
<Descriptions Title="用户自查信息" Bordered Column="@column">
    <DescriptionsItem Title="头像" >
        <Avatar Src="shopping-8042865.svg" />
        @* <Image Src="shopping-8042865.svg" Width="200px" Height="50px" /> *@
    </DescriptionsItem>
    <DescriptionsItem Title="员工工号" >@tmepletEmp.Id</DescriptionsItem>
    <DescriptionsItem Title="员工姓名" >@tmepletEmp.Name</DescriptionsItem>
    <DescriptionsItem Title="职位等级" >@tmepletEmp.Level_right</DescriptionsItem>
    <DescriptionsItem Title="员工性别" >@tmepletEmp.Gender</DescriptionsItem>
    
    <DescriptionsItem Title="部门编号" >@tmepletEmp.Department!.Id</DescriptionsItem>
    <DescriptionsItem Title="部门名称" >
        @tmepletEmp.Department!.Name
        @* 2018-04-24 18:00:00 To 2019-04-24 18:00:00 *@
    </DescriptionsItem>
    <DescriptionsItem Title="部门主管工号" >
        @tmepletEmp.Department!.ManagerID
    </DescriptionsItem>
    <DescriptionsItem Title="父部门编号" >
        @tmepletEmp.Department!.ParentDepartmentID
    </DescriptionsItem>
    <DescriptionsItem Title="部门大小" >
        @tmepletEmp.Department!.DepartmentSize
    </DescriptionsItem>
    <DescriptionsItem Title="部门建立时间" Span="1">
        @tmepletEmp.Department!.CreationDate
    </DescriptionsItem>
    <DescriptionsItem Title="部门状态"  Span="1">
        <Badge Status="@BadgeStatus.Processing" Text="运行中" ></Badge>
    </DescriptionsItem>
    <DescriptionsItem Title="部门职能" Span="3">
        
        @tmepletEmp.Department!.Description
        <br />
    
        地区: 中国
        <br />
    </DescriptionsItem>
    <DescriptionsItem Title="薪资发放记录" >
        
        @if(tmepletEmp.Payrolls is not null){
            @foreach (Payroll pay in tmepletEmp.Payrolls){
                
                
                <Card Style="Width:200px"> 
                <span>薪资发放记录编号：<br />@pay.Id</span>
                <br />
                <span>应发工资：<br />@pay.MoneyShould</span>
                <br />
                <span>实发工资：<br />@pay.MoneyPaid</span>
                <br />
                <span>薪资发放记录日期：<br />@pay.PayDate</span>
                <br />
                </Card>
            }
            <Line></Line>
            <br />
        }
    </DescriptionsItem>
</Descriptions>
        @* <span>OpenIcon Set</span> *@

    @* <Collapse DefaultActiveKey="@(new[]{"1"})"  Animation>
        <Panel Header="OpenIcon Set" Key="1">
            <div class="row">
                @foreach (string s in list)
                {
                    <div class="col-lg-3"><span class="oi @s" aria-hidden="true"></span> @s</div>
                }
            </div> 
        </Panel>
    </Collapse> *@
}

@code{
    static readonly string[] list = new string[] { "oi-account-login", "oi-account-logout", "oi-action-redo", "oi-action-undo", "oi-align-center", "oi-align-left", "oi-align-right", "oi-aperture", "oi-arrow-bottom", "oi-arrow-circle-bottom", "oi-arrow-circle-left", "oi-arrow-circle-right", "oi-arrow-circle-top", "oi-arrow-left", "oi-arrow-right", "oi-arrow-thick-bottom", "oi-arrow-thick-left", "oi-arrow-thick-right", "oi-arrow-thick-top", "oi-arrow-top", "oi-audio-spectrum", "oi-audio", "oi-badge", "oi-ban", "oi-bar-chart", "oi-basket", "oi-battery-empty", "oi-battery-full", "oi-beaker", "oi-bell", "oi-bluetooth", "oi-bold", "oi-bolt", "oi-book", "oi-bookmark", "oi-box", "oi-briefcase", "oi-british-pound", "oi-browser", "oi-brush", "oi-bug", "oi-bullhorn", "oi-calculator", "oi-calendar", "oi-camera-slr", "oi-caret-bottom", "oi-caret-left", "oi-caret-right", "oi-caret-top", "oi-cart", "oi-chat", "oi-check", "oi-chevron-bottom", "oi-chevron-left", "oi-chevron-right", "oi-chevron-top", "oi-circle-check", "oi-circle-x", "oi-clipboard", "oi-clock", "oi-cloud-download", "oi-cloud-upload", "oi-cloud", "oi-cloudy", "oi-code", "oi-cog", "oi-collapse-down", "oi-collapse-left", "oi-collapse-right", "oi-collapse-up", "oi-command", "oi-comment-square", "oi-compass", "oi-contrast", "oi-copywriting", "oi-credit-card", "oi-crop", "oi-dashboard", "oi-data-transfer-download", "oi-data-transfer-upload", "oi-delete", "oi-dial", "oi-document", "oi-dollar", "oi-double-quote-sans-left", "oi-double-quote-sans-right", "oi-double-quote-serif-left", "oi-double-quote-serif-right", "oi-droplet", "oi-eject", "oi-elevator", "oi-ellipses", "oi-envelope-closed", "oi-envelope-open", "oi-euro", "oi-excerpt", "oi-expand-down", "oi-expand-left", "oi-expand-right", "oi-expand-up", "oi-external-link", "oi-eye", "oi-eyedropper", "oi-file", "oi-fire", "oi-flag", "oi-flash", "oi-folder", "oi-fork", "oi-fullscreen-enter", "oi-fullscreen-exit", "oi-globe", "oi-graph", "oi-grid-four-up", "oi-grid-three-up", "oi-grid-two-up", "oi-hard-drive", "oi-header", "oi-headphones", "oi-heart", "oi-home", "oi-image", "oi-inbox", "oi-infinity", "oi-info", "oi-italic", "oi-justify-center", "oi-justify-left", "oi-justify-right", "oi-key", "oi-laptop", "oi-layers", "oi-lightbulb", "oi-link-broken", "oi-link-intact", "oi-list-rich", "oi-list", "oi-location", "oi-lock-locked", "oi-lock-unlocked", "oi-loop-circular", "oi-loop-square", "oi-loop", "oi-magnifying-glass", "oi-map-marker", "oi-map", "oi-media-pause", "oi-media-play", "oi-media-record", "oi-media-skip-backward", "oi-media-skip-forward", "oi-media-step-backward", "oi-media-step-forward", "oi-media-stop", "oi-medical-cross", "oi-menu", "oi-microphone", "oi-minus", "oi-monitor", "oi-moon", "oi-move", "oi-musical-note", "oi-paperclip", "oi-pencil", "oi-people", "oi-person", "oi-phone", "oi-pie-chart", "oi-pin", "oi-play-circle", "oi-plus", "oi-power-standby", "oi-print", "oi-project", "oi-pulse", "oi-puzzle-piece", "oi-question-mark", "oi-rain", "oi-random", "oi-reload", "oi-resize-both", "oi-resize-height", "oi-resize-width", "oi-rss-alt", "oi-rss", "oi-script", "oi-share-boxed", "oi-share", "oi-shield", "oi-signal", "oi-signpost", "oi-sort-ascending", "oi-sort-descending", "oi-spreadsheet", "oi-star", "oi-sun", "oi-tablet", "oi-tag", "oi-tags", "oi-target", "oi-task", "oi-terminal", "oi-text", "oi-thumb-down", "oi-thumb-up", "oi-timer", "oi-transfer", "oi-trash", "oi-underline", "oi-vertical-align-bottom", "oi-vertical-align-center", "oi-vertical-align-top", "oi-video", "oi-volume-high", "oi-volume-low", "oi-volume-off", "oi-warning", "oi-wifi", "oi-wrench", "oi-x", "oi-yen", "oi-zoom-in", "oi-zoom-out" };

    @using ehrms.Model
    @inject IHttpClientFactory client
    Controller.DaoController? Dc;
    Employee tmepletEmp = new(){
        Id=0,
        Name="游客",
        Gender="未知",
        Declarations=[],
        @* Department= *@
    };
    async Task GetInfo()
    {
        @* idstr=id.ToString(); *@
        var idstr = ID.ToString();
        if (idstr is null || idstr == "")
        {
            return;
        }
        Dc = new(client);
        @* List<ehrms.Model.Employee>? tlist = []; *@
        var Empresult = await Dc.GetByIdAsync<ehrms.Model.Employee>("Employees/All", idstr);
        //var Deptresult = await Dc.GetByIdAsync<ehrms.Model.Employee>("Employees", idstr);
        if (Empresult is null)
        {
            return;
        }
        tmepletEmp=Empresult;
        if(tmepletEmp.Department is not null){
            Console.WriteLine(tmepletEmp.Department.Id + tmepletEmp.Department.Name);
        }
        @* tlist.Add(result);
EmployeeList=tlist; *@

        StateHasChanged();
        return;


    }
}

<!-- #region  teaching-->
@* 

<ErrorMsg errormsg=@errstr></ErrorMsg>


<Card Style="width: 95%;" BodyStyle="padding: 0; overflow: hidden;">
    <Flex Justify="space-between">
        <img alt="avatar" src="geometric-7719159.svg" style="display:block;width:50%;" />
        <Flex Vertical Align="flex-end" Justify="space-between" Style="padding: 32px;">
            <Title Level="3">
                “antd is an enterprise-class UI design language and React UI library.”
            </Title>
            <span>LoginStatetem:@LoginStatetem.ToString();Signed:@Signed.ToString()</span>
            @if (LoginStatetem == true)
            {
                @if (Signed == true)
                {
                    <span>
                        @name：到达时间 @SignLogTEM.Arrive ;
                        <Button @onclick="PersonExit" Type="@ButtonType.Primary">check out</Button>
                    </span>
                }
                else
                {
                    <Button @onclick="PersonArrived" Type="@ButtonType.Primary">check in</Button>
                }
            }
        </Flex>

                <Card Hoverable Title=@("二月") Style="width: 300px;margin:1%">
                    <p>樊志安 22/31</p>
                    <p>罗维 30/31</p>
                    <p>徐昌坤 8/31</p>
                </Card>
                <Card Hoverable Title=@("三月") Style="width: 300px;margin:1%">
                    <p>樊志安 26/30</p>
                    <p>罗维 30/30</p>
                    <p>徐昌坤 8/30</p>
                </Card>
    </Flex>

</Card>


@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject IHttpClientFactory httpclientfactory

@code {


    string name = "樊志安";
    //int Personid=-2;
    bool Signed = false;
    string errstr = "";
    SignLog SignLogTEM { get; set; } = new();
    bool LoginStatetem = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //逻辑模糊，当第一次渲染的时候，判断是否有tem日志
        if(firstRender){
            var logresult = await ProtectedSessionStore.GetAsync<SignLog>("SignLogTEM");
            if(logresult.Value != null){
                SignLogTEM=logresult.Value;
            }else{
                errstr+="SignLogTEM null";
                StateHasChanged();
                return;
            }
        }
        var result = await ProtectedSessionStore.GetAsync<bool>("LoginState");

        var holder=await ProtectedSessionStore.GetAsync<bool>("Signed");    
        Signed=holder.Value;

            

        //SignLogTEM.Arrive
        
        if (result.Success == true)
        {
            LoginStatetem = result.Value;
            
        }

        StateHasChanged();
        //=result.Success ? result.Value : "false";
        //return base.OnAfterRenderAsync(firstRender);
    }

    async Task PersonArrived()
    {
        Signed = true;

        //SignLogTEM.Id=DateTime.Now.Year+DateTime.Now.Month+DateTime.Now.Day;
        var result = await ProtectedSessionStore.GetAsync<int>("PersonId");
        if (result.Success == false)
        {
            //
            //Personid=;
            errstr += "GetPersonId Failed" + result.ToString() + result.Value;

            return;
        }

        SignLogTEM.PersonId = result.Value;
        SignLogTEM.Arrive = DateTime.Now;
        await ProtectedSessionStore.SetAsync("SignLogTEM", SignLogTEM);
        await ProtectedSessionStore.SetAsync("Signed", true);
        //2024/2/20 22:37:23
        StateHasChanged();
        //signlogtem.Exit=new DateTime(2023,12,8,16,30,00);
    }
    async Task PersonExit()
    {
        //Signed=true;
        //Exitalert=true;


        SignLogTEM.Exit = DateTime.Now;
        Controller.DaoController Dc = new(httpclientfactory);
        await Dc.AddOneAsync("SignLogs", SignLogTEM);
        await ProtectedSessionStore.SetAsync("Signed", false);
        SignLogTEM.Exit = new DateTime();
        SignLogTEM.Arrive = new DateTime();
        await ProtectedSessionStore.SetAsync("SignLogTEM", SignLogTEM);
        StateHasChanged();
    }

} *@

<!-- #endregion  teaching-->

<!-- #region -->


@* 
        <GridRow Gutter="450" Style="margin-top:0">

            <GridCol Span="8">


            </GridCol>
            <GridCol Span="8">


            </GridCol>
        </GridRow> *@


@* @inject String str
<h1>@str</h1>
src="shopping-8042865.svg"
*@

@* 
<Button @onclick="@(e=>{NavigationManager.NavigateTo("/Person");})">Back</Button>
<Button @onclick="@(e=>{NavigationManager.NavigateTo("/");})">Return home</Button> 
*@

@* @inject Controller.DaoController Dc *@
@* <button @onclick="PersonArrived" class="btn-primary">check in</button> *@

@*-----------
<button>Sign</button>
<button>Sign in</button> *@

@*
<Card Style="width: 75%;" BodyStyle="padding: 0; overflow: hidden;">
<Flex Justify="space-between">
<img alt="avatar"
src="shopping-8042865.svg"
style="width:50%;" />

<Flex Vertical Align="flex-end" Justify="space-between" Style="padding: 32px;">
<Title Level="3">
“antd is an enterprise-class UI design language and React UI library.”
</Title>


</Flex>
<Card Hoverable Title=@("二月") Style="width: 300px;">
<p>樊志安 22/31</p>
<p>罗维 30/31</p>
<p>徐昌坤 8/31</p>
</Card>
<Card Hoverable Title=@("三月") Style="width: 300px;">
<p>樊志安 26/30</p>
<p>罗维 30/30</p>
<p>徐昌坤 8/30</p>
</Card>
</Flex>


</span>

</Card> *@

@* <Space Direction="DirectionVHType.Vertical">
<SpaceItem>


</SpaceItem>
<SpaceItem>

</SpaceItem>
</Space> *@


@*


<Button @onclick="thank" Type="@ButtonType.Primary">Thank you</Button>
@using static Console
@code{
        void thank(){
            WriteLine(
                "THANK!"
                );
        }
    }

二月
樊志安 22/31
罗维 30/31
徐昌坤 8/31

三月
樊志安 26/30
罗维 30/30
徐昌坤 8/30

今天
樊志安 [已签到]
罗维 [Null]
徐昌坤 [NoPlan]
@* @using AntDesign.Charts
@using Title = AntDesign.Charts.Title *@

<!-- #endregion -->