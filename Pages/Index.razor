@page "/"

<!-- #region -->
@* <ListComponent Name="FoodList!" Data="" ItemType="">

</ListComponent> *@


@* <ListComponent Name="Weather List" Data="forecasts" ItemType="WeatherForecast">
<HeadTemplet>
<th>Date</th>
<th>Temp. (C)</th>
<th>Temp. (F)</th>
<th>Summary</th>
</HeadTemplet>
<RowTemplet>
<td>@context.Date</td>
<td>@context.TemperatureC</td>
<td>@context.TemperatureF</td>
<td>@context.Summary</td>
</RowTemplet>
<ContentTemplet>
@displayPass

@context
@forecasts!.Count()
</ContentTemplet>
</ListComponent>

<RenderTest />
<PasswordEntry @bind-inerpassword=displayPass />
*@



@*
<input type="text" @bind=Context @oninput=input />
<br>
@Context
@code{
String Context="What is Your Day?";
void input(ChangeEventArgs e){
Context=e.Value!.ToString()+",";
}
*@

@* @if(DataList is null){
<p>loading...</p>
}else{
@DataList;
}

@onclick="@(e => total = number1 + number2)"

*@


@*
<EditForm Model="selectedIdList">
<InputCheckbox>
</InputCheckbox>
</EditForm>
*@


<!-- #endregion -->
@if (errormsg.Any())
{
    //=new DateTime(2023,12,8,16,30,00);
    //"2023/12/6 18:30:00";
    errormsg+=DateTime.Now.ToShortDateString();
    <div>
        <p class=" bg-danger text-warning  p-3  w-70   ">@errormsg</p>
        <button @onclick="@(e=> errormsg="")" class=" btn-close "></button>
    </div>
}

select department by Id:
<input type="number" @bind=SearchId>
<button @onclick=GetDeptById class="btn-primary">GetData</button>
<br>


<div class="DepartmentList ">
    <ListComponent Name="Department" ItemType="Department" Data="DataList">

        <HeadTemplet>
            <th>OrderNumber</th>
            <th>Id</th>
            <th>Name</th>
            <th>Operation
                <button @onclick=GetAllDept class=" btn-success ">RefreshDept</button>
                <button @onclick=UpdateDepartment class="btn-secondary">Update</button>
                @* @{
                bool notContains =false;

                if(selectedIdList is not null){
                notContains=!selectedIdList.Any();
                return;
                }

                disabled=@notContains
                } *@
                <button @onclick=DeleteDepartment class="btn-danger">Delete</button>

            </th>
            <br>

        </HeadTemplet>
        <RowTemplet>
            <td></td>
            <td>@context.Id</td>
            <td><input @bind-value=@context.Name></td>
            <td>
                @{
                    void select()
                    {

                        if (selectedIdList!.Contains(context.Id))
                        {
                            selectedIdList.Remove(context.Id);
                            return;
                        }
                        selectedIdList.Add(context.Id);
                    }
                }
                <input type="checkbox" @onclick=select />
                @* <button class=" disabled " disabled="true" @onclick="@(
                e=> dps.DeleteAsync(context.Id)
                )">Delete</button> *@
            </td>
        </RowTemplet>
        <ContentTemplet>

            <p>TotalNumber:@DataList!.Count();</p>

            <td><input type="number" @bind=dept!.Id class=" input-group-text"></td>

            <td><input type="text" @bind=dept.Name class=" input-group-text"></td>

            <button @onclick=addDepartment disabled=@isSubmitting class=" btn-primary">Add a NewDepartment</button>
        </ContentTemplet>
    </ListComponent>
</div>



@inject DepartmentService dps;
@inject NavigationManager NavigationManager;
@code {
    //String? displayPass="未输入";
    //以下的方法都可以变成模板，都可以重复使用，需要封装到方法里？
    //错误提示信息
    String errormsg = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetAllDept();
            //StateHasChanged();
        }
        await
        base.OnAfterRenderAsync(firstRender);
    }
    int SearchId;
    List<Department>? DataList;
    async Task GetDeptById()
    {
        var a = await dps.GetByIdAsync(SearchId);
        if (a is null)
        {
            Console.WriteLine("cant get datalist all,may time out or null database;");
            return;
        }
        DataList = a;
        StateHasChanged();
    }

    async Task GetAllDept()
    {
        var a = await dps.GetAllAsync();
        if (a is null)
        {
            Console.WriteLine("cant get datalist all,may time out or null database;");
            return;
        }
        DataList = a;
        StateHasChanged();
    }
    bool isSubmitting = false;
    Department? dept = new();
    //[System.ComponentModel.DataAnnotations.Required]
    //int newId;
    //String newName="newDepartmentName";
    async Task addDepartment()
    {
        if (dept is null)
        {
            Console.WriteLine("Input value is null please reEnter");
            return;
        }
        isSubmitting = true;
        await dps.AddAsync(dept);
        Thread.Sleep(1000);
        isSubmitting = false;
        //await GetAllDept();
        NavigationManager.NavigateTo("/", true);//refresh
    }

    async Task UpdateDepartment()
    {
        await dps.UpdateAsync(DataList!);

    }
    List<int>? selectedIdList = new();

    async Task DeleteDepartment()
    {
        //如果没有被选中 不应该让按钮生效
        if (selectedIdList is null)
        {
            Console.WriteLine("cant null delete");
            errormsg += "cant null delete";
            return;
        }

        if (!selectedIdList.Any())
        {
            Console.WriteLine("cant null delete");
            errormsg += "cant null delete";
            return;
        }

        foreach (var i in selectedIdList)
        {
            Console.WriteLine(i.ToString());
        }
        @* return; *@
        await dps.DeleteAsync(selectedIdList);
        selectedIdList = new();
        //await GetAllDept();
        NavigationManager.NavigateTo("/", true);//refresh
                                                //StateHasChanged();
    }

    @* void UpdateDepartment(){

//await dps.UpdateAsync(DataList!);
//Console.WriteLine("Keypress");
//await dps.Update(DataList);
} *@

}

@* 
<div class="PersonLIst">
    select Person by Id:
<input type="number" @bind=SearchId>
<button @onclick=GetDeptById class="btn-primary">GetData</button>
<br>
    <ListComponent Name="Persons" ItemType="Person" Data="PersonDataList">

        <HeadTemplet>
            <th>OrderNumber</th>
            <th>Id</th>
            <th>Name</th>
            <th>Department</th>
            <th>Operation
                <button @onclick=GetAllDept class=" btn-success ">RefreshDept</button>
                <button @onclick=UpdateDepartment class="btn-secondary">Update</button>
                <button @onclick=DeleteDepartment class="btn-danger">Delete</button>
            </th>
            <br>
        </HeadTemplet>
        <RowTemplet>
            <td></td>
            <td>@context.Id</td>
            <td><input @bind-value=@context.Name></td>
            <td>@context.Departments</td>
            @{//这真的能用吗？
            }
            <td>
                @{
                    void select()
                    {

                        if (selectedIdList!.Contains(context.Id))
                        {
                            selectedIdList.Remove(context.Id);
                            return;
                        }
                        selectedIdList.Add(context.Id);
                    }//@onclick=select
                }
                <input type="checkbox"  />
            </td>
        </RowTemplet>
        <ContentTemplet>

            <p>TotalNumber:@PersonDataList!.Count();</p>

            <td><input type="number" @bind=tempPerson!.Id class=" input-group-text"></td>
            <td><input type="text" @bind=tempPerson.Name class=" input-group-text"></td>
            <td><input type="text" @bind=tempPerson.Departments class=" input-group-text"></td>

            <button @onclick=addDepartment disabled=@isSubmitting class=" btn-primary">Add a Person</button>
        </ContentTemplet>
    </ListComponent>
</div> *@
<br>
<button @onclick=GetAllPerson class=" btn-success ">GetAllPerson</button>

@code{
    static HttpClient httpclient =new(){
        BaseAddress=new Uri("http://localhost:5198/"),
    };

    DaoController Dc=new(httpclient);
    //List<int> select
    List<Person> PersonDataList=[];
    Person tempPerson=new();
    async Task GetAllPerson()
    {
        var a = await Dc.GetAllAsync<Person>();
        if (a is null)
        {
            Console.WriteLine("cant get datalist all,may time out or null database;");
            return;
        }
        PersonDataList = a;
        StateHasChanged();
    }
    
}

<!-- #region -->

@code {

    //persons = await HttpClient.GetFromJsonAsync<List<Person>>(NavigationManager.BaseUri + "persons"+"/"+"?id="+id);
    //await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}persons", person);

    @*
Department[]? DataArray;
async void GetDataArray(){
DataArray=await HttpClient.GetFromJsonAsync<Department[]?>(NavigationManager.BaseUri + "Departments"+"/"+"?id="+id);
StateHasChanged();
}
private List<WeatherForecast>? forecasts;
protected override async Task OnInitializedAsync()
{
//forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
}
*@
}
<!-- #endregion -->