@page "/Login/{Id:int}"
@* @inject Accountinfo LoginState *@

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

@code {
    [Parameter]
    public int Id { get; set; } = 0;
    public Controller.DaoController? Dc;
    protected override void OnInitialized()
    {
        Dc = new(httpcient);
        return;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await GetSessionValue();
        StateHasChanged();
        //await ProtectedSessionStore.SetAsync("LoginState", log);
        //return base.OnAfterRenderAsync(firstRender);
    }
    bool LoginStatetem = false;
    //LoginState
    
    async Task GetSessionValue()
    {
        var result = await ProtectedSessionStore.GetAsync<bool>("LoginState");
        if (result.Success == true)
        {
            LoginStatetem = result.Value;
        }
    }
    string errormsg = "";
}

<Card Style="width: 100%;" BodyStyle="padding: 0; overflow: hidden;">

    <GridRow Align="middle" >
        <GridCol Span="6" style="padding: 1%;">
            <h1>LoginPage @LoginStatetem</h1>:@Id
                
<br />
@if (errormsg.Any())
{
    //=new DateTime(2023,12,8,16,30,00);
    //"2023/12/6 18:30:00";
    //errormsg+=DateTime.Now.ToShortDateString();
    <div>
        <p class=" bg-danger text-warning  p-3  w-70   ">@errormsg</p>
        <button @onclick="@(e=> errormsg="")" class=" btn-close "></button>
    </div>
}
    <br />


@if (LoginStatetem == true)
{
    <Button @onclick="Logout" Type="@ButtonType.Primary">Log out</Button>
}
else
{
    <span>
    AccountId:
    <br />
    <AntDesign.InputNumber TValue="Int32" @bind-Value=accountid>
    </AntDesign.InputNumber>
    </span>
    <br />
    <span>
    AccountPassword:
    <br />
    <InputText @bind-Value=accountpsw>
    </InputText>
    </span>
    <br />
    <Button @onclick="Login" Type="@ButtonType.Primary">Login</Button>

}
        </GridCol>
        <GridCol Span="18">
            <img src="triangles-1430105.svg">
        </GridCol>

    </GridRow>

</Card>


@inject IHttpClientFactory httpcient  
@inject NavigationManager NavigationManager;
@code {
    int accountid = -2;
    string accountpsw = "fza";
    //string log = "true";
    async Task Login()
    {
        errormsg="";
        @* Console.WriteLine("2"); *@
        var str = await GetPswFromDbById(accountid);
        errormsg += str;
        //accountpsw=errormsg;
        @* Console.WriteLine("5"); *@
        if (accountpsw != str)
        {
            errormsg += " / password or id not right";
            //await ProtectedSessionStore.SetAsync("LoginState", false);
            return;
        }
        errormsg+="Login Success & will return to index after now";
        //log = "true";

        var info = await GetAccountInfoFromDbById(accountid);

        await ProtectedSessionStore.SetAsync("LoginState", true);
        await ProtectedSessionStore.SetAsync("PersonId", accountid);
        //info.Right.
        await ProtectedSessionStore.SetAsync("Right", info.Right);
        //await ProtectedSessionStore.SetAsync("Name", );
        //await ProtectedSessionStore.SetAsync("Name", 0);
        //无法确保输入正确的值
        //为什么要获取值？是为了刷新吗？
        await GetSessionValue();

        StateHasChanged();
        //await nvitoindex();
        NavigationManager.NavigateTo("/");

    }

    async Task<Accountinfo> GetAccountInfoFromDbById(int Id){
        Dc = new(httpcient);
        
        var a = await Dc.GetOneOwnPropertyAsync<List<Accountinfo>>("Accountinfos", Id);
        Accountinfo? b = a!.FirstOrDefault();
        return b!;
    }
    //硬控3秒

    @* async void nvitoindex(){
        await Thread.Sleep(3000);
    } *@
    async Task Logout()
    {
        //log="false";
        //await ProtectedSessionStore.SetAsync("LoginState", true);
        //info.Right.
        await ProtectedSessionStore.SetAsync("PersonId", 0);
        await ProtectedSessionStore.SetAsync("Right", 0);
        await ProtectedSessionStore.SetAsync("LoginState", false);
        StateHasChanged();
    }

    async Task<string?> GetPswFromDbById(int Id)
    {
        @* Console.WriteLine("3"); *@
        string? pswstr = await Dc!.GetOneOwnPropertyAsync<string>("Accountinfos/Passwords", Id);
        if (pswstr is "")
        {
            errormsg += "task psw is null";
            return null;
            //return errormsg="task psw is null";
        }
        @* Console.WriteLine("4"); *@
        //GetOwnPropertyAsync
        @* if(task.FirstOrDefault<string>()){
} *@
        @* var a = task;
if (a is null){
return errormsg="First psw is null";
} *@
        return pswstr!;
        //return "";
    }
}