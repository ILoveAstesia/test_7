// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_7.Data;

#nullable disable

namespace test7.Migrations
{
    [DbContext(typeof(test_7Context))]
    partial class test7ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.Property<int>("ClazzsStudedInId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ClazzsStudedInId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ClassStudent");
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.Property<int>("ClazzsNeedtoTeachId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("ClazzsNeedtoTeachId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("ClassTeacher");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("PresentCoursesId")
                        .HasColumnType("int");

                    b.Property<int>("PresentStudentsId")
                        .HasColumnType("int");

                    b.HasKey("PresentCoursesId", "PresentStudentsId");

                    b.HasIndex("PresentStudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("DepartmentPerson", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("DepartmentPerson");
                });

            modelBuilder.Entity("test_7.Model.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clazzs");
                });

            modelBuilder.Entity("test_7.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentClazzId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentClazzId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("test_7.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("test_7.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("test_7.Model.Student", b =>
                {
                    b.HasBaseType("test_7.Model.Person");

                    b.Property<int>("CourseTimes")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("test_7.Model.Teacher", b =>
                {
                    b.HasBaseType("test_7.Model.Person");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.HasOne("test_7.Model.Class", null)
                        .WithMany()
                        .HasForeignKey("ClazzsStudedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test_7.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.HasOne("test_7.Model.Class", null)
                        .WithMany()
                        .HasForeignKey("ClazzsNeedtoTeachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test_7.Model.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("test_7.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("PresentCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test_7.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("PresentStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentPerson", b =>
                {
                    b.HasOne("test_7.Model.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test_7.Model.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test_7.Model.Course", b =>
                {
                    b.HasOne("test_7.Model.Class", "CurrentClazz")
                        .WithMany("PlanedCourse")
                        .HasForeignKey("CurrentClazzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentClazz");
                });

            modelBuilder.Entity("test_7.Model.Class", b =>
                {
                    b.Navigation("PlanedCourse");
                });
#pragma warning restore 612, 618
        }
    }
}
